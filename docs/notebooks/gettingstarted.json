{"cells":{"1":{"input_text":"// This notebook presents basic usage of Sushi2, a matrix library for JavaScript.\n// Press Shift+Enter to execute codes in the text box.\n1+1","output_html":"<div class=\"result\" data-output-cell-id=\"1\"><span class=\"output-cell-id\">Out 1</span><div class=\"result-body\"><p>2<br></p></div></div>"},"2":{"input_text":"// milsushi2.js exposes \"milsushi2\" object, the entry-point of the calculation.\nvar $M=milsushi2;\n// nothing will be output","output_html":"<div class=\"result\" data-output-cell-id=\"2\"><span class=\"output-cell-id\">Out 2</span><div class=\"result-body\"></div></div>"},"3":{"input_text":"// Sushi2 have similar function of MATLAB.\nvar a = $M.zeros(2, 3);// Creates 2x3 matrix\na;// Last evaluated object will be printed","output_html":"<div class=\"result\" data-output-cell-id=\"3\"><span class=\"output-cell-id\">Out 3</span><div class=\"result-body\"><p>0\t0\t0\t<br>0\t0\t0\t<br><br></p></div></div>"},"4":{"input_text":"// Since JavaScript does not have operator overload, operations are represented in function call form.\nvar b = $M.plus(a, 2);// a + 2 (element-wise)\nb;\n// +=plus, -=minus, .*=times (element-wise), ./=rdivide (element-wise)","output_html":"<div class=\"result\" data-output-cell-id=\"4\"><span class=\"output-cell-id\">Out 4</span><div class=\"result-body\"><p>2\t2\t2\t<br>2\t2\t2\t<br><br></p></div></div>"},"5":{"input_text":"// A matrix can be created from JavaScript array.\nvar c = $M.jsa2mat([[1,2,3],[4,5,6]]);\nc;","output_html":"<div class=\"result\" data-output-cell-id=\"5\"><span class=\"output-cell-id\">Out 5</span><div class=\"result-body\"><p>1\t2\t3\t<br>4\t5\t6\t<br><br></p></div></div>"},"6":{"input_text":"// Elements in matrices are 32bit floating point number at default.\nvar d = $M.rdivide(b, c);// b ./ c\nd;\n","output_html":"<div class=\"result\" data-output-cell-id=\"6\"><span class=\"output-cell-id\">Out 6</span><div class=\"result-body\"><p>2\t1\t0.6666666865348816\t<br>0.5\t0.4000000059604645\t0.3333333432674408\t<br><br></p></div></div>"},"7":{"input_text":"// getting element as scalar number\nc.get(2, 1);","output_html":"<div class=\"result\" data-output-cell-id=\"7\"><span class=\"output-cell-id\">Out 7</span><div class=\"result-body\"><p>4<br></p></div></div>"},"8":{"input_text":"// setting element\nc.set(2, 1, 8);\nc;","output_html":"<div class=\"result\" data-output-cell-id=\"8\"><span class=\"output-cell-id\">Out 8</span><div class=\"result-body\"><p>1\t2\t3\t<br>8\t5\t6\t<br><br></p></div></div>"},"9":{"input_text":"// getting a region of matrix\nc.get($M.colon(), $M.colon(1, 2));//c(:, 1:2) in MATLAB\n","output_html":"<div class=\"result\" data-output-cell-id=\"9\"><span class=\"output-cell-id\">Out 9</span><div class=\"result-body\"><p>1\t2\t<br>8\t5\t<br><br></p></div></div>"},"10":{"input_text":"// setting a region of matrix\nc.set(2, $M.colon(2, 3), $M.jsa2mat([[-1, 0.5]]));//c(2, 2:3) = [-1, 0.5]\nc;","output_html":"<div class=\"result\" data-output-cell-id=\"10\"><span class=\"output-cell-id\">Out 10</span><div class=\"result-body\"><p>1\t2\t3\t<br>8\t-1\t0.5\t<br><br></p></div></div>"},"11":{"input_text":"// comparison\n$M.lt(c, 3);//less than\n// logical matrix is given","output_html":"<div class=\"result\" data-output-cell-id=\"11\"><span class=\"output-cell-id\">Out 11</span><div class=\"result-body\"><p>1\t1\t0\t<br>0\t1\t1\t<br><br></p></div></div>"},"12":{"input_text":"// comparison and set\nc.set($M.lt(c, 3), 1);// c(c<3) = 1\nc;","output_html":"<div class=\"result\" data-output-cell-id=\"12\"><span class=\"output-cell-id\">Out 12</span><div class=\"result-body\"><p>1\t1\t3\t<br>8\t1\t1\t<br><br></p></div></div>"},"13":{"input_text":"// matrix multiplication\nvar e = $M.jsa2mat([[1, 2], [3, 4]]);\nvar f = $M.jsa2mat([[1, -1], [2, -2]]);\n$M.mtimes(e, f);","output_html":"<div class=\"result\" data-output-cell-id=\"13\"><span class=\"output-cell-id\">Out 13</span><div class=\"result-body\"><p>5\t-5\t<br>11\t-11\t<br><br></p></div></div>"},"14":{"input_text":"// transpose\n$M.t(c);","output_html":"<div class=\"result\" data-output-cell-id=\"14\"><span class=\"output-cell-id\">Out 14</span><div class=\"result-body\"><p>1\t8\t<br>1\t1\t<br>3\t1\t<br><br></p></div></div>"},"15":{"input_text":"// get JavaScript array\nvar jsarray = $M.mat2jsa(c);\nJSON.stringify(jsarray);","output_html":"<div class=\"result\" data-output-cell-id=\"15\"><span class=\"output-cell-id\">Out 15</span><div class=\"result-body\"><p>[[1,1,3],[8,1,1]]<br></p></div></div>"},"16":{"input_text":"// Matrix more than 2 dimensions are supported\nvar g = $M.zeros(2, 2, 2);\ng.set($M.colon(), $M.colon(), 1, $M.jsa2mat([[1,2],[3,4]]));\ng.set($M.colon(), $M.colon(), 2, $M.jsa2mat([[5,6],[7,8]]));\ng","output_html":"<div class=\"result\" data-output-cell-id=\"16\"><span class=\"output-cell-id\">Out 16</span><div class=\"result-body\"><p>1\t2\t<br>3\t4\t<br><br></p></div></div>"},"17":{"input_text":"g.get(1,2,2);","output_html":"<div class=\"result\" data-output-cell-id=\"17\"><span class=\"output-cell-id\">Out 17</span><div class=\"result-body\"><p>6<br></p></div></div>"}}}